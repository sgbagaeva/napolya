/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * NOTE: This class is auto-generated.
 * Do not edit the class manually.
 */
package com.example.napolya.controller;

import com.example.napolya.model.Game;
import jakarta.annotation.Generated;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Validated
public interface GamesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /games : Получить список названий игр
     *
     * @return Успешный ответ с массивом названий игр (status code 200)
     */
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/games",
            produces = {"application/json"}
    )
    default ResponseEntity<List<String>> gamesGet() {
        getRequest().ifPresent(request -> {
            // Установите пример ответа
            // Если есть требуемые примеры, вы можете добавить их тут
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * DELETE /games/{id} : Удалить игру
     *
     * @param id ID игры (required)
     * @return Игра успешно удалена (status code 204)
     * or Игра не найдена (status code 404)
     */
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/games/{id}"
    )
    default ResponseEntity<Void> gamesIdDelete(@PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /games/{id} : Получить информацию об игре
     *
     * @param id ID игры (required)
     * @return Информация об игре (status code 200)
     * or Игра не найдена (status code 404)
     */
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/games/{id}",
            produces = {"application/json"}
    )
    default ResponseEntity<Game> gamesIdGet(@PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            // Установите пример ответа
            // Если есть требуемые примеры, вы можете добавить их тут
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * PUT /games/{id} : Обновить информацию об игре
     *
     * @param id ID игры (required)
     * @param game (required)
     * @return Игра успешно обновлена (status code 200)
     * or Игра не найдена (status code 404)
     */
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/games/{id}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<Game> gamesIdPut(@PathVariable("id") Integer id, @RequestBody Game game) {
        getRequest().ifPresent(request -> {
            // Установите пример ответа
            // Если есть требуемые примеры, вы можете добавить их тут
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * POST /games : Создать новую игру
     *
     * @param game (required)
     * @return Игра успешно создана (status code 201)
     */
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/games",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<Game> gamesPost(@RequestBody Game game) {
        getRequest().ifPresent(request -> {
            // Установите пример ответа
            // Если есть требуемые примеры, вы можете добавить их тут
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
}
