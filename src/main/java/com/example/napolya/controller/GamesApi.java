/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.napolya.controller;

import com.example.napolya.model.Game;
import io.swagger.annotations.*;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-22T19:51:05.893207800+03:00[Europe/Moscow]")
@Validated
@Api(value = "games", description = "the games API")
public interface GamesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /games : Получить список названий игр
     *
     * @return Успешный ответ с массивом названий игр (status code 200)
     */
    @ApiOperation(value = "Получить список названий игр", nickname = "gamesGet", notes = "", response = String.class, responseContainer = "List", tags={ "Game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешный ответ с массивом названий игр", response = String.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/games",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> gamesGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[\"Мега супер игра\",\"Кубок Полей\"]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /games/{id} : Удалить игру
     *
     * @param id ID игры (required)
     * @return Игра успешно удалена (status code 204)
     *         or Игра не найдена (status code 404)
     */
    @ApiOperation(value = "Удалить игру", nickname = "gamesIdDelete", notes = "", tags={ "Game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Игра успешно удалена"),
        @ApiResponse(code = 404, message = "Игра не найдена") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/games/{id}"
    )
    default ResponseEntity<Void> gamesIdDelete(@ApiParam(value = "ID игры", required = true) @PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /games/{id} : Получить информацию об игре
     *
     * @param id ID игры (required)
     * @return Информация об игре (status code 200)
     *         or Игра не найдена (status code 404)
     */
    @ApiOperation(value = "Получить информацию об игре", nickname = "gamesIdGet", notes = "", response = Game.class, tags={ "Game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Информация об игре", response = Game.class),
        @ApiResponse(code = 404, message = "Игра не найдена") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/games/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Game> gamesIdGet(@ApiParam(value = "ID игры", required = true) @PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"field_id\" : 1, \"name\" : \"Мега супер игра\", \"creator_id\" : 2, \"teams_ids\" : [ 10, 11 ], \"description\" : \"Друзья сыграют в дружеском матче в эту субботу.\", \"id\" : 1, \"queue_id\" : 1, \"start_date\" : \"2024-11-16T15:00:00Z\", \"status\" : \"ожидание\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /games/{id} : Обновить информацию об игре
     *
     * @param id ID игры (required)
     * @param game  (required)
     * @return Игра успешно обновлена (status code 200)
     *         or Игра не найдена (status code 404)
     */
    @ApiOperation(value = "Обновить информацию об игре", nickname = "gamesIdPut", notes = "", response = Game.class, tags={ "Game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Игра успешно обновлена", response = Game.class),
        @ApiResponse(code = 404, message = "Игра не найдена") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/games/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Game> gamesIdPut(@ApiParam(value = "ID игры", required = true) @PathVariable("id") Integer id,@ApiParam(value = "", required = true) @Valid @RequestBody Game game) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"field_id\" : 1, \"name\" : \"Мега супер игра\", \"creator_id\" : 2, \"teams_ids\" : [ 10, 11 ], \"description\" : \"Друзья сыграют в дружеском матче в эту субботу.\", \"id\" : 1, \"queue_id\" : 1, \"start_date\" : \"2024-11-16T15:00:00Z\", \"status\" : \"ожидание\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /games : Создать новую игру
     *
     * @param game  (required)
     * @return Игра успешно создана (status code 201)
     */
    @ApiOperation(value = "Создать новую игру", nickname = "gamesPost", notes = "", response = Game.class, tags={ "Game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Игра успешно создана", response = Game.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/games",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Game> gamesPost(@ApiParam(value = "", required = true) @Valid @RequestBody Game game) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"field_id\" : 1, \"name\" : \"Мега супер игра\", \"creator_id\" : 2, \"teams_ids\" : [ 10, 11 ], \"description\" : \"Друзья сыграют в дружеском матче в эту субботу.\", \"id\" : 1, \"queue_id\" : 1, \"start_date\" : \"2024-11-16T15:00:00Z\", \"status\" : \"ожидание\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
