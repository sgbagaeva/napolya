/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.napolya.controller;

import com.example.napolya.model.Queue;
import jakarta.annotation.Generated;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-22T19:51:05.893207800+03:00[Europe/Moscow]")
public interface QueuesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /queues : Получить список id очередей
     *
     * @return Успешный ответ с массивом id очередей (status code 200)
     */
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/queues",
            produces = {"application/json"}
    )
    default ResponseEntity<List<Integer>> queuesGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "0";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * DELETE /queues/{id} : Удалить очередь
     *
     * @param id ID очереди (required)
     * @return Очередь успешно удалена (status code 204)
     * or Очередь не найдена (status code 404)
     */
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/queues/{id}"
    )
    default ResponseEntity<Void> queuesIdDelete(@PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /queues/{id} : Получить информацию об очереди
     *
     * @param id ID очереди (required)
     * @return Информация об очереди (status code 200)
     * or Очередь не найдена (status code 404)
     */
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/queues/{id}",
            produces = {"application/json"}
    )
    default ResponseEntity<Queue> queuesIdGet(@PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 1, \"players_ids\" : [ 5, 6, 7 ], \"game_id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * PUT /queues/{id} : Обновить информацию об очереди
     *
     * @param id ID очереди (required)
     * @param queue (required)
     * @return Очередь успешно обновлена (status code 200)
     * or Очередь не найдена (status code 404)
     */
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/queues/{id}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<Queue> queuesIdPut(@PathVariable("id") Integer id, @RequestBody Queue queue) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 1, \"players_ids\" : [ 5, 6, 7 ], \"game_id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * POST /queues : Создать новую очередь
     *
     * @param queue (required)
     * @return Очередь успешно создана (status code 201)
     */
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/queues",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<Queue> queuesPost(@RequestBody Queue queue) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 1, \"players_ids\" : [ 5, 6, 7 ], \"game_id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
}

