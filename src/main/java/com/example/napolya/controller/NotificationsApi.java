/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.napolya.controller;

import com.example.napolya.model.Notification;
import io.swagger.annotations.*;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-22T19:51:05.893207800+03:00[Europe/Moscow]")
@Validated
@Api(value = "notifications", description = "the notifications API")
public interface NotificationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /notifications : Получить список id уведомлений
     *
     * @return Успешный ответ с массивом id уведомлений (status code 200)
     */
    @ApiOperation(value = "Получить список id уведомлений", nickname = "notificationsGet", notes = "", response = Integer.class, responseContainer = "List", tags={ "Notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешный ответ с массивом id уведомлений", response = Integer.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/notifications",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Integer>> notificationsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "0";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /notifications/{id} : Удалить уведомление
     *
     * @param id ID уведомления (required)
     * @return Уведомление успешно удалено (status code 204)
     *         or Уведомление не найдено (status code 404)
     */
    @ApiOperation(value = "Удалить уведомление", nickname = "notificationsIdDelete", notes = "", tags={ "Notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Уведомление успешно удалено"),
        @ApiResponse(code = 404, message = "Уведомление не найдено") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/notifications/{id}"
    )
    default ResponseEntity<Void> notificationsIdDelete(@ApiParam(value = "ID уведомления", required = true) @PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /notifications/{id} : Получить информацию об уведомлении
     *
     * @param id ID уведомления (required)
     * @return Информация об уведомлении (status code 200)
     *         or Уведомление не найдено (status code 404)
     */
    @ApiOperation(value = "Получить информацию об уведомлении", nickname = "notificationsIdGet", notes = "", response = Notification.class, tags={ "Notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Информация об уведомлении", response = Notification.class),
        @ApiResponse(code = 404, message = "Уведомление не найдено") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/notifications/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Notification> notificationsIdGet(@ApiParam(value = "ID уведомления", required = true) @PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2024-11-16T10:00:00Z\", \"id\" : 1, \"text\" : \"Вы записаны в команду A!\", \"type\" : \"уведомление о составе команды\", \"recipient_id\" : 2, \"status\" : \"непрочитанное\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /notifications/{id} : Обновить информацию об уведомлении
     *
     * @param id ID уведомления (required)
     * @param notification  (required)
     * @return Уведомление успешно обновлено (status code 200)
     *         or Уведомление не найдено (status code 404)
     */
    @ApiOperation(value = "Обновить информацию об уведомлении", nickname = "notificationsIdPut", notes = "", response = Notification.class, tags={ "Notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Уведомление успешно обновлено", response = Notification.class),
        @ApiResponse(code = 404, message = "Уведомление не найдено") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/notifications/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Notification> notificationsIdPut(@ApiParam(value = "ID уведомления", required = true) @PathVariable("id") Integer id,@ApiParam(value = "", required = true) @Valid @RequestBody Notification notification) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2024-11-16T10:00:00Z\", \"id\" : 1, \"text\" : \"Вы записаны в команду A!\", \"type\" : \"уведомление о составе команды\", \"recipient_id\" : 2, \"status\" : \"непрочитанное\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /notifications : Создать новое уведомление
     *
     * @param notification  (required)
     * @return Уведомление успешно создано (status code 201)
     */
    @ApiOperation(value = "Создать новое уведомление", nickname = "notificationsPost", notes = "", response = Notification.class, tags={ "Notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Уведомление успешно создано", response = Notification.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/notifications",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Notification> notificationsPost(@ApiParam(value = "", required = true) @Valid @RequestBody Notification notification) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2024-11-16T10:00:00Z\", \"id\" : 1, \"text\" : \"Вы записаны в команду A!\", \"type\" : \"уведомление о составе команды\", \"recipient_id\" : 2, \"status\" : \"непрочитанное\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
