/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.napolya.controller;

import com.example.napolya.model.InlineObject;
import com.example.napolya.model.InlineObject1;
import com.example.napolya.model.InlineResponse2001;
import com.example.napolya.model.InlineResponse404;
import com.example.napolya.model.InlineResponse500;
import com.example.napolya.model.Player;
import io.swagger.annotations.*;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-22T19:51:05.893207800+03:00[Europe/Moscow]")
@Validated
@Api(value = "players", description = "the players API")
public interface PlayersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /players/{id} : Получить информацию об игроке
     * Возвращает данные об игроке по id.
     *
     * @param id Уникальный идентификатор игрока (required)
     * @return Успешное получение информации об игроке (status code 200)
     *         or Игрок не найден (status code 404)
     *         or Ошибка сервера (status code 500)
     */
    @ApiOperation(value = "Получить информацию об игроке", nickname = "getPlayerById", notes = "Возвращает данные об игроке по id.", response = Player.class, tags={ "Player", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешное получение информации об игроке", response = Player.class),
        @ApiResponse(code = 404, message = "Игрок не найден", response = InlineResponse404.class),
        @ApiResponse(code = 500, message = "Ошибка сервера", response = InlineResponse500.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/players/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Player> getPlayerById(@ApiParam(value = "Уникальный идентификатор игрока", required = true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"666#999\", \"role\" : \"Игрок\", \"registration_date\" : \"2024-01-01T12:00:00Z\", \"entries_amount\" : 3, \"surname\" : \"Багаева\", \"games_ids\" : [ 2, 5, 7 ], \"name\" : \"Света\", \"rating\" : 12, \"id\" : 1234, \"email\" : \"sveta@gmail.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /players : Получить список игроков
     *
     * @return Успешный ответ с массивом имён игроков (status code 200)
     */
    @ApiOperation(value = "Получить список игроков", nickname = "playersGet", notes = "", response = String.class, responseContainer = "List", tags={ "Player", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешный ответ с массивом имён игроков", response = String.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/players",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> playersGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[\"Света\",\"Георгий\",\"Юра\",\"Витя\"]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /players/{id} : Удалить игрока
     *
     * @param id ID игрока (required)
     * @return Игрок успешно удалён (status code 204)
     *         or Игрок не найден (status code 404)
     */
    @ApiOperation(value = "Удалить игрока", nickname = "playersIdDelete", notes = "", tags={ "Player", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Игрок успешно удалён"),
        @ApiResponse(code = 404, message = "Игрок не найден") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/players/{id}"
    )
    default ResponseEntity<Void> playersIdDelete(@ApiParam(value = "ID игрока", required = true) @PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /players/{id} : Обновить информацию об игроке
     *
     * @param id ID игрока (required)
     * @param player  (required)
     * @return Игрок успешно обновлён (status code 200)
     *         or Игрок не найден (status code 404)
     */
    @ApiOperation(value = "Обновить информацию об игроке", nickname = "playersIdPut", notes = "", response = Player.class, tags={ "Player", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Игрок успешно обновлён", response = Player.class),
        @ApiResponse(code = 404, message = "Игрок не найден") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/players/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Player> playersIdPut(@ApiParam(value = "ID игрока", required = true) @PathVariable("id") Integer id,@ApiParam(value = "", required = true) @Valid @RequestBody Player player) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"666#999\", \"role\" : \"Игрок\", \"registration_date\" : \"2024-01-01T12:00:00Z\", \"entries_amount\" : 3, \"surname\" : \"Багаева\", \"games_ids\" : [ 2, 5, 7 ], \"name\" : \"Света\", \"rating\" : 12, \"id\" : 1234, \"email\" : \"sveta@gmail.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /players/login : Авторизация пользователя
     * Авторизует пользователя и перенаправляет на соответствующую главную страницу.
     *
     * @param inlineObject1  (required)
     * @return Успешная авторизация (status code 200)
     *         or Неверные учетные данные (status code 401)
     */
    @ApiOperation(value = "Авторизация пользователя", nickname = "playersLoginPost", notes = "Авторизует пользователя и перенаправляет на соответствующую главную страницу.", response = InlineResponse2001.class, tags={ "Player", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешная авторизация", response = InlineResponse2001.class),
        @ApiResponse(code = 401, message = "Неверные учетные данные") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/players/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse2001> playersLoginPost(@ApiParam(value = "", required = true) @Valid @RequestBody InlineObject1 inlineObject1) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"admin\", \"token\" : \"jwt-token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /players : Создать нового игрока
     *
     * @param player  (required)
     * @return Игрок успешно создан (status code 201)
     */
    @ApiOperation(value = "Создать нового игрока", nickname = "playersPost", notes = "", response = Player.class, tags={ "Player", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Игрок успешно создан", response = Player.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/players",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Player> playersPost(@ApiParam(value = "", required = true) @Valid @RequestBody Player player) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"666#999\", \"role\" : \"Игрок\", \"registration_date\" : \"2024-01-01T12:00:00Z\", \"entries_amount\" : 3, \"surname\" : \"Багаева\", \"games_ids\" : [ 2, 5, 7 ], \"name\" : \"Света\", \"rating\" : 12, \"id\" : 1234, \"email\" : \"sveta@gmail.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /players/register : Регистрация нового игрока
     * Позволяет новому пользователю зарегистрироваться в системе.
     *
     * @param inlineObject  (required)
     * @return Успешная регистрация (status code 201)
     *         or Ошибка валидации данных (status code 400)
     */
    @ApiOperation(value = "Регистрация нового игрока", nickname = "playersRegisterPost", notes = "Позволяет новому пользователю зарегистрироваться в системе.", tags={ "Player", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Успешная регистрация"),
        @ApiResponse(code = 400, message = "Ошибка валидации данных") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/players/register",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> playersRegisterPost(@ApiParam(value = "", required = true) @Valid @RequestBody InlineObject inlineObject) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
