/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.napolya.controller;

import com.example.napolya.model.Provider;
import jakarta.annotation.Generated;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-22T19:51:05.893207800+03:00[Europe/Moscow]")
public interface ProvidersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /providers : Получить список названий провайдеров
     *
     * @return Успешный ответ с массивом названий провайдеров (status code 200)
     */
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/providers",
            produces = {"application/json"}
    )
    default ResponseEntity<List<String>> providersGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[\"Поляна\",\"Интерспорт\"]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * DELETE /providers/{id} : Удалить провайдера
     *
     * @param id ID провайдера (required)
     * @return Провайдер успешно удалён (status code 204)
     * or Провайдер не найден (status code 404)
     */
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/providers/{id}"
    )
    default ResponseEntity<Void> providersIdDelete(@PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /providers/{id} : Получить информацию о провайдере
     *
     * @param id ID провайдера (required)
     * @return Информация о провайдере (status code 200)
     * or Провайдер не найден (status code 404)
     */
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/providers/{id}",
            produces = {"application/json"}
    )
    default ResponseEntity<Provider> providersIdGet(@PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"fields_ids\" : [ 1, 2, 3 ], \"name\" : \"Поляна\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * PUT /providers/{id} : Обновить информацию о провайдере
     *
     * @param id ID провайдера (required)
     * @param provider (required)
     * @return Провайдер успешно обновлён (status code 200)
     * or Провайдер не найден (status code 404)
     */
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/providers/{id}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<Provider> providersIdPut(@PathVariable("id") Integer id, @RequestBody Provider provider) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"fields_ids\" : [ 1, 2, 3 ], \"name\" : \"Поляна\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * POST /providers : Создать нового провайдера
     *
     * @param provider (required)
     * @return Провайдер успешно создан (status code 201)
     */
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/providers",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<Provider> providersPost(@RequestBody Provider provider) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"fields_ids\" : [ 1, 2, 3 ], \"name\" : \"Поляна\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
}
