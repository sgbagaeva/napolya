/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.napolya.controller;

import com.example.napolya.model.Field;
import io.swagger.annotations.*;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-22T19:51:05.893207800+03:00[Europe/Moscow]")
@Validated
@Api(value = "fields", description = "the fields API")
public interface FieldsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /fields : Получить список названий полей
     *
     * @return Успешный ответ с массивом названий полей (status code 200)
     */
    @ApiOperation(value = "Получить список названий полей", nickname = "fieldsGet", notes = "", response = String.class, responseContainer = "List", tags={ "Field", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Успешный ответ с массивом названий полей", response = String.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fields",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> fieldsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[\"Арена Спорта\",\"Поле В11\"]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /fields/{id} : Удалить поле
     *
     * @param id ID поля (required)
     * @return Поле успешно удалено (status code 204)
     *         or Поле не найдено (status code 404)
     */
    @ApiOperation(value = "Удалить поле", nickname = "fieldsIdDelete", notes = "", tags={ "Field", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Поле успешно удалено"),
        @ApiResponse(code = 404, message = "Поле не найдено") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/fields/{id}"
    )
    default ResponseEntity<Void> fieldsIdDelete(@ApiParam(value = "ID поля", required = true) @PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /fields/{id} : Получить информацию о поле
     *
     * @param id ID поля (required)
     * @return Информация о поле (status code 200)
     *         or Поле не найдено (status code 404)
     */
    @ApiOperation(value = "Получить информацию о поле", nickname = "fieldsIdGet", notes = "", response = Field.class, tags={ "Field", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Информация о поле", response = Field.class),
        @ApiResponse(code = 404, message = "Поле не найдено") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fields/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Field> fieldsIdGet(@ApiParam(value = "ID поля", required = true) @PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"games_ids\" : [ 101, 102, 103 ], \"name\" : \"Арена Спорта\", \"description\" : \"Большой стадион с искусственным покрытием для футбольных матчей.\", \"provider_id\" : 2, \"location\" : \"ул. Спортивная, д. 1, г. Санкт-Петербург\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /fields/{id} : Обновить информацию о поле
     *
     * @param id ID поля (required)
     * @param field  (required)
     * @return Поле успешно обновлено (status code 200)
     *         or Поле не найдено (status code 404)
     */
    @ApiOperation(value = "Обновить информацию о поле", nickname = "fieldsIdPut", notes = "", response = Field.class, tags={ "Field", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Поле успешно обновлено", response = Field.class),
        @ApiResponse(code = 404, message = "Поле не найдено") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/fields/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Field> fieldsIdPut(@ApiParam(value = "ID поля", required = true) @PathVariable("id") Integer id,@ApiParam(value = "", required = true) @Valid @RequestBody Field field) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"games_ids\" : [ 101, 102, 103 ], \"name\" : \"Арена Спорта\", \"description\" : \"Большой стадион с искусственным покрытием для футбольных матчей.\", \"provider_id\" : 2, \"location\" : \"ул. Спортивная, д. 1, г. Санкт-Петербург\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
