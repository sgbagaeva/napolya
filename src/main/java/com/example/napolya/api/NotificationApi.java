/*
 * API na_polya 3.0
 * Все необходимые API для сайта На_поля
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.napolya.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Notification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationApi {
    private ApiClient localVarApiClient;

    public NotificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for notificationsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом id уведомлений </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = notificationsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Получить список id уведомлений
     * 
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом id уведомлений </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> notificationsGet() throws ApiException {
        ApiResponse<List<Integer>> localVarResp = notificationsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить список id уведомлений
     * 
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом id уведомлений </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> notificationsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = notificationsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить список id уведомлений (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом id уведомлений </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsGetAsync(final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsIdDelete
     * @param id ID уведомления (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Уведомление успешно удалено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notificationsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = notificationsIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Удалить уведомление
     * 
     * @param id ID уведомления (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Уведомление успешно удалено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsIdDelete(Integer id) throws ApiException {
        notificationsIdDeleteWithHttpInfo(id);
    }

    /**
     * Удалить уведомление
     * 
     * @param id ID уведомления (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Уведомление успешно удалено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = notificationsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удалить уведомление (asynchronously)
     * 
     * @param id ID уведомления (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Уведомление успешно удалено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsIdGet
     * @param id ID уведомления (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об уведомлении </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notificationsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = notificationsIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Получить информацию об уведомлении
     * 
     * @param id ID уведомления (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об уведомлении </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public Notification notificationsIdGet(Integer id) throws ApiException {
        ApiResponse<Notification> localVarResp = notificationsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Получить информацию об уведомлении
     * 
     * @param id ID уведомления (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об уведомлении </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> notificationsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = notificationsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить информацию об уведомлении (asynchronously)
     * 
     * @param id ID уведомления (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об уведомлении </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsIdGetAsync(Integer id, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsIdPut
     * @param id ID уведомления (required)
     * @param notification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Уведомление успешно обновлено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsIdPutCall(Integer id, Notification notification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = notification;

        // create path and map variables
        String localVarPath = "/notifications/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsIdPutValidateBeforeCall(Integer id, Notification notification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling notificationsIdPut(Async)");
        }
        
        // verify the required parameter 'notification' is set
        if (notification == null) {
            throw new ApiException("Missing the required parameter 'notification' when calling notificationsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = notificationsIdPutCall(id, notification, _callback);
        return localVarCall;

    }

    /**
     * Обновить информацию об уведомлении
     * 
     * @param id ID уведомления (required)
     * @param notification  (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Уведомление успешно обновлено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public Notification notificationsIdPut(Integer id, Notification notification) throws ApiException {
        ApiResponse<Notification> localVarResp = notificationsIdPutWithHttpInfo(id, notification);
        return localVarResp.getData();
    }

    /**
     * Обновить информацию об уведомлении
     * 
     * @param id ID уведомления (required)
     * @param notification  (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Уведомление успешно обновлено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> notificationsIdPutWithHttpInfo(Integer id, Notification notification) throws ApiException {
        okhttp3.Call localVarCall = notificationsIdPutValidateBeforeCall(id, notification, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновить информацию об уведомлении (asynchronously)
     * 
     * @param id ID уведомления (required)
     * @param notification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Уведомление успешно обновлено </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Уведомление не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsIdPutAsync(Integer id, Notification notification, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsIdPutValidateBeforeCall(id, notification, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsPost
     * @param notification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Уведомление успешно создано </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsPostCall(Notification notification, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = notification;

        // create path and map variables
        String localVarPath = "/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsPostValidateBeforeCall(Notification notification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'notification' is set
        if (notification == null) {
            throw new ApiException("Missing the required parameter 'notification' when calling notificationsPost(Async)");
        }
        

        okhttp3.Call localVarCall = notificationsPostCall(notification, _callback);
        return localVarCall;

    }

    /**
     * Создать новое уведомление
     * 
     * @param notification  (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Уведомление успешно создано </td><td>  -  </td></tr>
     </table>
     */
    public Notification notificationsPost(Notification notification) throws ApiException {
        ApiResponse<Notification> localVarResp = notificationsPostWithHttpInfo(notification);
        return localVarResp.getData();
    }

    /**
     * Создать новое уведомление
     * 
     * @param notification  (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Уведомление успешно создано </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> notificationsPostWithHttpInfo(Notification notification) throws ApiException {
        okhttp3.Call localVarCall = notificationsPostValidateBeforeCall(notification, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создать новое уведомление (asynchronously)
     * 
     * @param notification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Уведомление успешно создано </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsPostAsync(Notification notification, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsPostValidateBeforeCall(notification, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
