/*
 * API na_polya 3.0
 * Все необходимые API для сайта На_поля
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.napolya.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Queue;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueueApi {
    private ApiClient localVarApiClient;

    public QueueApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueueApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for queuesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом id очередей </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = queuesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Получить список id очередей
     * 
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом id очередей </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> queuesGet() throws ApiException {
        ApiResponse<List<Integer>> localVarResp = queuesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить список id очередей
     * 
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом id очередей </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> queuesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = queuesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить список id очередей (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом id очередей </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesGetAsync(final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesIdDelete
     * @param id ID очереди (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Очередь успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queues/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling queuesIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = queuesIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Удалить очередь
     * 
     * @param id ID очереди (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Очередь успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public void queuesIdDelete(Integer id) throws ApiException {
        queuesIdDeleteWithHttpInfo(id);
    }

    /**
     * Удалить очередь
     * 
     * @param id ID очереди (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Очередь успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> queuesIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = queuesIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удалить очередь (asynchronously)
     * 
     * @param id ID очереди (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Очередь успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesIdGet
     * @param id ID очереди (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об очереди </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queues/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling queuesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = queuesIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Получить информацию об очереди
     * 
     * @param id ID очереди (required)
     * @return Queue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об очереди </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public Queue queuesIdGet(Integer id) throws ApiException {
        ApiResponse<Queue> localVarResp = queuesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Получить информацию об очереди
     * 
     * @param id ID очереди (required)
     * @return ApiResponse&lt;Queue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об очереди </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Queue> queuesIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = queuesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить информацию об очереди (asynchronously)
     * 
     * @param id ID очереди (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об очереди </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesIdGetAsync(Integer id, final ApiCallback<Queue> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesIdPut
     * @param id ID очереди (required)
     * @param queue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Очередь успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesIdPutCall(Integer id, Queue queue, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = queue;

        // create path and map variables
        String localVarPath = "/queues/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesIdPutValidateBeforeCall(Integer id, Queue queue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling queuesIdPut(Async)");
        }
        
        // verify the required parameter 'queue' is set
        if (queue == null) {
            throw new ApiException("Missing the required parameter 'queue' when calling queuesIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = queuesIdPutCall(id, queue, _callback);
        return localVarCall;

    }

    /**
     * Обновить информацию об очереди
     * 
     * @param id ID очереди (required)
     * @param queue  (required)
     * @return Queue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Очередь успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public Queue queuesIdPut(Integer id, Queue queue) throws ApiException {
        ApiResponse<Queue> localVarResp = queuesIdPutWithHttpInfo(id, queue);
        return localVarResp.getData();
    }

    /**
     * Обновить информацию об очереди
     * 
     * @param id ID очереди (required)
     * @param queue  (required)
     * @return ApiResponse&lt;Queue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Очередь успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Queue> queuesIdPutWithHttpInfo(Integer id, Queue queue) throws ApiException {
        okhttp3.Call localVarCall = queuesIdPutValidateBeforeCall(id, queue, null);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновить информацию об очереди (asynchronously)
     * 
     * @param id ID очереди (required)
     * @param queue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Очередь успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Очередь не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesIdPutAsync(Integer id, Queue queue, final ApiCallback<Queue> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesIdPutValidateBeforeCall(id, queue, _callback);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queuesPost
     * @param queue  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Очередь успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesPostCall(Queue queue, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = queue;

        // create path and map variables
        String localVarPath = "/queues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queuesPostValidateBeforeCall(Queue queue, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'queue' is set
        if (queue == null) {
            throw new ApiException("Missing the required parameter 'queue' when calling queuesPost(Async)");
        }
        

        okhttp3.Call localVarCall = queuesPostCall(queue, _callback);
        return localVarCall;

    }

    /**
     * Создать новую очередь
     * 
     * @param queue  (required)
     * @return Queue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Очередь успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public Queue queuesPost(Queue queue) throws ApiException {
        ApiResponse<Queue> localVarResp = queuesPostWithHttpInfo(queue);
        return localVarResp.getData();
    }

    /**
     * Создать новую очередь
     * 
     * @param queue  (required)
     * @return ApiResponse&lt;Queue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Очередь успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Queue> queuesPostWithHttpInfo(Queue queue) throws ApiException {
        okhttp3.Call localVarCall = queuesPostValidateBeforeCall(queue, null);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создать новую очередь (asynchronously)
     * 
     * @param queue  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Очередь успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queuesPostAsync(Queue queue, final ApiCallback<Queue> _callback) throws ApiException {

        okhttp3.Call localVarCall = queuesPostValidateBeforeCall(queue, _callback);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
