/*
 * API na_polya 3.0
 * Все необходимые API для сайта На_поля
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.napolya.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.InlineResponse404;
import org.openapitools.client.model.InlineResponse500;
import org.openapitools.client.model.Player;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlayerApi {
    private ApiClient localVarApiClient;

    public PlayerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlayerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getPlayerById
     * @param id Уникальный идентификатор игрока (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение информации об игроке </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerByIdCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayerByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPlayerById(Async)");
        }
        

        okhttp3.Call localVarCall = getPlayerByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Получить информацию об игроке
     * Возвращает данные об игроке по id.
     * @param id Уникальный идентификатор игрока (required)
     * @return Player
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение информации об игроке </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public Player getPlayerById(String id) throws ApiException {
        ApiResponse<Player> localVarResp = getPlayerByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Получить информацию об игроке
     * Возвращает данные об игроке по id.
     * @param id Уникальный идентификатор игрока (required)
     * @return ApiResponse&lt;Player&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение информации об игроке </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Player> getPlayerByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getPlayerByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Player>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить информацию об игроке (asynchronously)
     * Возвращает данные об игроке по id.
     * @param id Уникальный идентификатор игрока (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное получение информации об игроке </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerByIdAsync(String id, final ApiCallback<Player> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayerByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Player>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for playersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом имён игроков </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = playersGetCall(_callback);
        return localVarCall;

    }

    /**
     * Получить список игроков
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом имён игроков </td><td>  -  </td></tr>
     </table>
     */
    public List<String> playersGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = playersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить список игроков
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом имён игроков </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> playersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = playersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить список игроков (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом имён игроков </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = playersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for playersIdDelete
     * @param id ID игрока (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Игрок успешно удалён </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playersIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling playersIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = playersIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Удалить игрока
     * 
     * @param id ID игрока (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Игрок успешно удалён </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
     </table>
     */
    public void playersIdDelete(Integer id) throws ApiException {
        playersIdDeleteWithHttpInfo(id);
    }

    /**
     * Удалить игрока
     * 
     * @param id ID игрока (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Игрок успешно удалён </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playersIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = playersIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удалить игрока (asynchronously)
     * 
     * @param id ID игрока (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Игрок успешно удалён </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playersIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for playersIdPut
     * @param id ID игрока (required)
     * @param player  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Игрок успешно обновлён </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersIdPutCall(Integer id, Player player, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = player;

        // create path and map variables
        String localVarPath = "/players/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playersIdPutValidateBeforeCall(Integer id, Player player, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling playersIdPut(Async)");
        }
        
        // verify the required parameter 'player' is set
        if (player == null) {
            throw new ApiException("Missing the required parameter 'player' when calling playersIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = playersIdPutCall(id, player, _callback);
        return localVarCall;

    }

    /**
     * Обновить информацию об игроке
     * 
     * @param id ID игрока (required)
     * @param player  (required)
     * @return Player
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Игрок успешно обновлён </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
     </table>
     */
    public Player playersIdPut(Integer id, Player player) throws ApiException {
        ApiResponse<Player> localVarResp = playersIdPutWithHttpInfo(id, player);
        return localVarResp.getData();
    }

    /**
     * Обновить информацию об игроке
     * 
     * @param id ID игрока (required)
     * @param player  (required)
     * @return ApiResponse&lt;Player&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Игрок успешно обновлён </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Player> playersIdPutWithHttpInfo(Integer id, Player player) throws ApiException {
        okhttp3.Call localVarCall = playersIdPutValidateBeforeCall(id, player, null);
        Type localVarReturnType = new TypeToken<Player>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновить информацию об игроке (asynchronously)
     * 
     * @param id ID игрока (required)
     * @param player  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Игрок успешно обновлён </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игрок не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersIdPutAsync(Integer id, Player player, final ApiCallback<Player> _callback) throws ApiException {

        okhttp3.Call localVarCall = playersIdPutValidateBeforeCall(id, player, _callback);
        Type localVarReturnType = new TypeToken<Player>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for playersLoginPost
     * @param inlineObject1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешная авторизация </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Неверные учетные данные </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersLoginPostCall(InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/players/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playersLoginPostValidateBeforeCall(InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject1' is set
        if (inlineObject1 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject1' when calling playersLoginPost(Async)");
        }
        

        okhttp3.Call localVarCall = playersLoginPostCall(inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Авторизация пользователя
     * Авторизует пользователя и перенаправляет на соответствующую главную страницу.
     * @param inlineObject1  (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешная авторизация </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Неверные учетные данные </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 playersLoginPost(InlineObject1 inlineObject1) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = playersLoginPostWithHttpInfo(inlineObject1);
        return localVarResp.getData();
    }

    /**
     * Авторизация пользователя
     * Авторизует пользователя и перенаправляет на соответствующую главную страницу.
     * @param inlineObject1  (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешная авторизация </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Неверные учетные данные </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> playersLoginPostWithHttpInfo(InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = playersLoginPostValidateBeforeCall(inlineObject1, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Авторизация пользователя (asynchronously)
     * Авторизует пользователя и перенаправляет на соответствующую главную страницу.
     * @param inlineObject1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешная авторизация </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Неверные учетные данные </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersLoginPostAsync(InlineObject1 inlineObject1, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = playersLoginPostValidateBeforeCall(inlineObject1, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for playersPost
     * @param player  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Игрок успешно создан </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersPostCall(Player player, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = player;

        // create path and map variables
        String localVarPath = "/players";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playersPostValidateBeforeCall(Player player, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'player' is set
        if (player == null) {
            throw new ApiException("Missing the required parameter 'player' when calling playersPost(Async)");
        }
        

        okhttp3.Call localVarCall = playersPostCall(player, _callback);
        return localVarCall;

    }

    /**
     * Создать нового игрока
     * 
     * @param player  (required)
     * @return Player
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Игрок успешно создан </td><td>  -  </td></tr>
     </table>
     */
    public Player playersPost(Player player) throws ApiException {
        ApiResponse<Player> localVarResp = playersPostWithHttpInfo(player);
        return localVarResp.getData();
    }

    /**
     * Создать нового игрока
     * 
     * @param player  (required)
     * @return ApiResponse&lt;Player&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Игрок успешно создан </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Player> playersPostWithHttpInfo(Player player) throws ApiException {
        okhttp3.Call localVarCall = playersPostValidateBeforeCall(player, null);
        Type localVarReturnType = new TypeToken<Player>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создать нового игрока (asynchronously)
     * 
     * @param player  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Игрок успешно создан </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersPostAsync(Player player, final ApiCallback<Player> _callback) throws ApiException {

        okhttp3.Call localVarCall = playersPostValidateBeforeCall(player, _callback);
        Type localVarReturnType = new TypeToken<Player>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for playersRegisterPost
     * @param inlineObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Успешная регистрация </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации данных </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersRegisterPostCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/players/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playersRegisterPostValidateBeforeCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject' is set
        if (inlineObject == null) {
            throw new ApiException("Missing the required parameter 'inlineObject' when calling playersRegisterPost(Async)");
        }
        

        okhttp3.Call localVarCall = playersRegisterPostCall(inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Регистрация нового игрока
     * Позволяет новому пользователю зарегистрироваться в системе.
     * @param inlineObject  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Успешная регистрация </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации данных </td><td>  -  </td></tr>
     </table>
     */
    public void playersRegisterPost(InlineObject inlineObject) throws ApiException {
        playersRegisterPostWithHttpInfo(inlineObject);
    }

    /**
     * Регистрация нового игрока
     * Позволяет новому пользователю зарегистрироваться в системе.
     * @param inlineObject  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Успешная регистрация </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации данных </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> playersRegisterPostWithHttpInfo(InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = playersRegisterPostValidateBeforeCall(inlineObject, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Регистрация нового игрока (asynchronously)
     * Позволяет новому пользователю зарегистрироваться в системе.
     * @param inlineObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Успешная регистрация </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации данных </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playersRegisterPostAsync(InlineObject inlineObject, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = playersRegisterPostValidateBeforeCall(inlineObject, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
