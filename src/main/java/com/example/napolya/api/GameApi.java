/*
 * API na_polya 3.0
 * Все необходимые API для сайта На_поля
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.napolya.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Game;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GameApi {
    private ApiClient localVarApiClient;

    public GameApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GameApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for gamesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом названий игр </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = gamesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Получить список названий игр
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом названий игр </td><td>  -  </td></tr>
     </table>
     */
    public List<String> gamesGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = gamesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить список названий игр
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом названий игр </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> gamesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = gamesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить список названий игр (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом названий игр </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesIdDelete
     * @param id ID игры (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Игра успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling gamesIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = gamesIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Удалить игру
     * 
     * @param id ID игры (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Игра успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public void gamesIdDelete(Integer id) throws ApiException {
        gamesIdDeleteWithHttpInfo(id);
    }

    /**
     * Удалить игру
     * 
     * @param id ID игры (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Игра успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gamesIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = gamesIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удалить игру (asynchronously)
     * 
     * @param id ID игры (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Игра успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesIdGet
     * @param id ID игры (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об игре </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling gamesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = gamesIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Получить информацию об игре
     * 
     * @param id ID игры (required)
     * @return Game
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об игре </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public Game gamesIdGet(Integer id) throws ApiException {
        ApiResponse<Game> localVarResp = gamesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Получить информацию об игре
     * 
     * @param id ID игры (required)
     * @return ApiResponse&lt;Game&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об игре </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Game> gamesIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = gamesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить информацию об игре (asynchronously)
     * 
     * @param id ID игры (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация об игре </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesIdGetAsync(Integer id, final ApiCallback<Game> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesIdPut
     * @param id ID игры (required)
     * @param game  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Игра успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesIdPutCall(Integer id, Game game, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = game;

        // create path and map variables
        String localVarPath = "/games/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesIdPutValidateBeforeCall(Integer id, Game game, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling gamesIdPut(Async)");
        }
        
        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling gamesIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = gamesIdPutCall(id, game, _callback);
        return localVarCall;

    }

    /**
     * Обновить информацию об игре
     * 
     * @param id ID игры (required)
     * @param game  (required)
     * @return Game
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Игра успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public Game gamesIdPut(Integer id, Game game) throws ApiException {
        ApiResponse<Game> localVarResp = gamesIdPutWithHttpInfo(id, game);
        return localVarResp.getData();
    }

    /**
     * Обновить информацию об игре
     * 
     * @param id ID игры (required)
     * @param game  (required)
     * @return ApiResponse&lt;Game&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Игра успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Game> gamesIdPutWithHttpInfo(Integer id, Game game) throws ApiException {
        okhttp3.Call localVarCall = gamesIdPutValidateBeforeCall(id, game, null);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновить информацию об игре (asynchronously)
     * 
     * @param id ID игры (required)
     * @param game  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Игра успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Игра не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesIdPutAsync(Integer id, Game game, final ApiCallback<Game> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesIdPutValidateBeforeCall(id, game, _callback);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesPost
     * @param game  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Игра успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesPostCall(Game game, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = game;

        // create path and map variables
        String localVarPath = "/games";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesPostValidateBeforeCall(Game game, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'game' is set
        if (game == null) {
            throw new ApiException("Missing the required parameter 'game' when calling gamesPost(Async)");
        }
        

        okhttp3.Call localVarCall = gamesPostCall(game, _callback);
        return localVarCall;

    }

    /**
     * Создать новую игру
     * 
     * @param game  (required)
     * @return Game
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Игра успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public Game gamesPost(Game game) throws ApiException {
        ApiResponse<Game> localVarResp = gamesPostWithHttpInfo(game);
        return localVarResp.getData();
    }

    /**
     * Создать новую игру
     * 
     * @param game  (required)
     * @return ApiResponse&lt;Game&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Игра успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Game> gamesPostWithHttpInfo(Game game) throws ApiException {
        okhttp3.Call localVarCall = gamesPostValidateBeforeCall(game, null);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создать новую игру (asynchronously)
     * 
     * @param game  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Игра успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesPostAsync(Game game, final ApiCallback<Game> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesPostValidateBeforeCall(game, _callback);
        Type localVarReturnType = new TypeToken<Game>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
