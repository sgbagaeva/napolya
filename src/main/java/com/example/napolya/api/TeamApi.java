/*
 * API na_polya 3.0
 * Все необходимые API для сайта На_поля
 *
 * The version of the OpenAPI document: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.napolya.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Team;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamApi {
    private ApiClient localVarApiClient;

    public TeamApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for teamsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом названий команд </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = teamsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Получить список названий команд
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом названий команд </td><td>  -  </td></tr>
     </table>
     */
    public List<String> teamsGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = teamsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить список названий команд
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом названий команд </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> teamsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = teamsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить список названий команд (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный ответ с массивом названий команд </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsIdDelete
     * @param id ID команды (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Команда успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = teamsIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Удалить команду
     * 
     * @param id ID команды (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Команда успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public void teamsIdDelete(Integer id) throws ApiException {
        teamsIdDeleteWithHttpInfo(id);
    }

    /**
     * Удалить команду
     * 
     * @param id ID команды (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Команда успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = teamsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удалить команду (asynchronously)
     * 
     * @param id ID команды (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Команда успешно удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsIdGet
     * @param id ID команды (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о команде </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = teamsIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Получить информацию о команде
     * 
     * @param id ID команды (required)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о команде </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsIdGet(Integer id) throws ApiException {
        ApiResponse<Team> localVarResp = teamsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Получить информацию о команде
     * 
     * @param id ID команды (required)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о команде </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = teamsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить информацию о команде (asynchronously)
     * 
     * @param id ID команды (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о команде </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdGetAsync(Integer id, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsIdPut
     * @param id ID команды (required)
     * @param team  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Команда успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdPutCall(Integer id, Team team, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = team;

        // create path and map variables
        String localVarPath = "/teams/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsIdPutValidateBeforeCall(Integer id, Team team, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling teamsIdPut(Async)");
        }
        
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = teamsIdPutCall(id, team, _callback);
        return localVarCall;

    }

    /**
     * Обновить информацию о команде
     * 
     * @param id ID команды (required)
     * @param team  (required)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Команда успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsIdPut(Integer id, Team team) throws ApiException {
        ApiResponse<Team> localVarResp = teamsIdPutWithHttpInfo(id, team);
        return localVarResp.getData();
    }

    /**
     * Обновить информацию о команде
     * 
     * @param id ID команды (required)
     * @param team  (required)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Команда успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsIdPutWithHttpInfo(Integer id, Team team) throws ApiException {
        okhttp3.Call localVarCall = teamsIdPutValidateBeforeCall(id, team, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновить информацию о команде (asynchronously)
     * 
     * @param id ID команды (required)
     * @param team  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Команда успешно обновлена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Команда не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsIdPutAsync(Integer id, Team team, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsIdPutValidateBeforeCall(id, team, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsPost
     * @param team  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Команда успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsPostCall(Team team, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = team;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsPostValidateBeforeCall(Team team, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'team' is set
        if (team == null) {
            throw new ApiException("Missing the required parameter 'team' when calling teamsPost(Async)");
        }
        

        okhttp3.Call localVarCall = teamsPostCall(team, _callback);
        return localVarCall;

    }

    /**
     * Создать новую команду
     * 
     * @param team  (required)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Команда успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsPost(Team team) throws ApiException {
        ApiResponse<Team> localVarResp = teamsPostWithHttpInfo(team);
        return localVarResp.getData();
    }

    /**
     * Создать новую команду
     * 
     * @param team  (required)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Команда успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsPostWithHttpInfo(Team team) throws ApiException {
        okhttp3.Call localVarCall = teamsPostValidateBeforeCall(team, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создать новую команду (asynchronously)
     * 
     * @param team  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Команда успешно создана </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsPostAsync(Team team, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsPostValidateBeforeCall(team, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
